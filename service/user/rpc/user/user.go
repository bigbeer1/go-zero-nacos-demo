// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: sysuser.proto

package user

import (
	"context"

	"go-zero-demo/service/user/rpc/userclient"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CommonResp         = userclient.CommonResp
	SysUserAddReq      = userclient.SysUserAddReq
	SysUserDeleteReq   = userclient.SysUserDeleteReq
	SysUserFindOneReq  = userclient.SysUserFindOneReq
	SysUserFindOneResp = userclient.SysUserFindOneResp
	SysUserListData    = userclient.SysUserListData
	SysUserListReq     = userclient.SysUserListReq
	SysUserListResp    = userclient.SysUserListResp
	SysUserUpdateReq   = userclient.SysUserUpdateReq

	User interface {
		SysUserAdd(ctx context.Context, in *SysUserAddReq, opts ...grpc.CallOption) (*CommonResp, error)
		SysUserDelete(ctx context.Context, in *SysUserDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
		SysUserUpdate(ctx context.Context, in *SysUserUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
		SysUserFindOne(ctx context.Context, in *SysUserFindOneReq, opts ...grpc.CallOption) (*SysUserFindOneResp, error)
		SysUserList(ctx context.Context, in *SysUserListReq, opts ...grpc.CallOption) (*SysUserListResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) SysUserAdd(ctx context.Context, in *SysUserAddReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := userclient.NewUserClient(m.cli.Conn())
	return client.SysUserAdd(ctx, in, opts...)
}

func (m *defaultUser) SysUserDelete(ctx context.Context, in *SysUserDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := userclient.NewUserClient(m.cli.Conn())
	return client.SysUserDelete(ctx, in, opts...)
}

func (m *defaultUser) SysUserUpdate(ctx context.Context, in *SysUserUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := userclient.NewUserClient(m.cli.Conn())
	return client.SysUserUpdate(ctx, in, opts...)
}

func (m *defaultUser) SysUserFindOne(ctx context.Context, in *SysUserFindOneReq, opts ...grpc.CallOption) (*SysUserFindOneResp, error) {
	client := userclient.NewUserClient(m.cli.Conn())
	return client.SysUserFindOne(ctx, in, opts...)
}

func (m *defaultUser) SysUserList(ctx context.Context, in *SysUserListReq, opts ...grpc.CallOption) (*SysUserListResp, error) {
	client := userclient.NewUserClient(m.cli.Conn())
	return client.SysUserList(ctx, in, opts...)
}
